import{_ as s,o as a,c as e,a7 as i}from"./chunks/framework.euTsEaZO.js";const v=JSON.parse('{"title":"使用svn进行版本管理","description":"diff对比，版本管理","frontmatter":{"title":"使用svn进行版本管理","description":"diff对比，版本管理","tag":["工具"],"sidebar":false},"headers":[],"relativePath":"tools/kaleidoscape_svn.md","filePath":"tools/kaleidoscape_svn.md","lastUpdated":1724984328000}'),n={name:"tools/kaleidoscape_svn.md"},t=i(`<h1 id="使用svn进行版本管理" tabindex="-1">使用svn进行版本管理 <a class="header-anchor" href="#使用svn进行版本管理" aria-label="Permalink to &quot;使用svn进行版本管理&quot;">​</a></h1><h2 id="svn" tabindex="-1">svn <a class="header-anchor" href="#svn" aria-label="Permalink to &quot;svn&quot;">​</a></h2><p>代码管理工具。和git对比有着更简单，更安全的特点。常用于企业管理代码。</p><p>将本地代码合并到 <code>prd</code> 分支并提交发版的完整步骤可以按以下流程进行。这假设你已经有一个本地工作副本，并且你正在使用 SVN 进行版本控制。</p><p>这次从创建本地仓库到合并发版的一些常用命令：</p><h3 id="_1-更新本地代码库" tabindex="-1">1. <strong>更新本地代码库</strong> <a class="header-anchor" href="#_1-更新本地代码库" aria-label="Permalink to &quot;1. **更新本地代码库**&quot;">​</a></h3><p>首先，确保你的本地代码库是最新的，以避免合并时产生冲突。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">svn</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> update</span></span></code></pre></div><p>这会把远程代码库中最新的修改拉取到你的本地工作副本。</p><h3 id="_2-切换到-prd-分支" tabindex="-1">2. <strong>切换到 <code>prd</code> 分支</strong> <a class="header-anchor" href="#_2-切换到-prd-分支" aria-label="Permalink to &quot;2. **切换到 \`prd\` 分支**&quot;">​</a></h3><p>如果你当前不在 <code>prd</code> 分支，需要切换到该分支。假设 <code>prd</code> 是你需要合并到的分支。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">svn</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> switch</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> ^/branches/prd</span></span></code></pre></div><p>这个命令会将你的工作副本切换到 <code>prd</code> 分支。</p><h3 id="_3-合并代码到-prd-分支" tabindex="-1">3. <strong>合并代码到 <code>prd</code> 分支</strong> <a class="header-anchor" href="#_3-合并代码到-prd-分支" aria-label="Permalink to &quot;3. **合并代码到 \`prd\` 分支**&quot;">​</a></h3><p>现在，将你的本地更改合并到 <code>prd</code> 分支。通常你会从你的开发分支（如 <code>dev</code> 或 <code>feature-branch</code>）合并。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">svn</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> merge</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> ^/branches/dev</span></span></code></pre></div><p>这里，<code>^/branches/dev</code> 表示远程 <code>dev</code> 分支的路径。</p><p>如果你是在本地开发的，而不是在特定分支，可以使用：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">svn</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> merge</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> .</span></span></code></pre></div><p>这将当前工作副本的更改合并到 <code>prd</code> 分支。</p><h3 id="_4-解决冲突" tabindex="-1">4. <strong>解决冲突</strong> <a class="header-anchor" href="#_4-解决冲突" aria-label="Permalink to &quot;4. **解决冲突**&quot;">​</a></h3><p>合并过程中可能会产生冲突。SVN 会标记这些冲突，你需要手动解决它们。</p><ul><li><p>打开冲突文件并手动编辑，确保合并的代码是正确的。</p></li><li><p>使用以下命令标记冲突已经解决：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">svn</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> resolve</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> --accept=working</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> &lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">file_nam</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">e</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span></span></code></pre></div></li></ul><p>或者，如果你使用的是图形化工具（如 TortoiseSVN 或 Kaleidoscope），可以通过界面解决冲突。</p><h3 id="_5-测试和验证" tabindex="-1">5. <strong>测试和验证</strong> <a class="header-anchor" href="#_5-测试和验证" aria-label="Permalink to &quot;5. **测试和验证**&quot;">​</a></h3><p>在提交之前，确保合并后的代码能够正常工作。你可以在本地环境中执行测试，确保没有引入新的问题。</p><h3 id="_6-提交代码到-prd-分支" tabindex="-1">6. <strong>提交代码到 <code>prd</code> 分支</strong> <a class="header-anchor" href="#_6-提交代码到-prd-分支" aria-label="Permalink to &quot;6. **提交代码到 \`prd\` 分支**&quot;">​</a></h3><p>一旦合并完成，并且你确信代码没有问题，可以提交更改到 <code>prd</code> 分支。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">svn</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> commit</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -m</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">Merged changes from dev branch to prd for release.</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span></span></code></pre></div><p>这里的 <code>-m</code> 选项用于添加提交信息，描述此次合并的内容。</p><h3 id="_7-标记版本-可选" tabindex="-1">7. <strong>标记版本（可选）</strong> <a class="header-anchor" href="#_7-标记版本-可选" aria-label="Permalink to &quot;7. **标记版本（可选）**&quot;">​</a></h3><p>为了记录发版的状态，可以为此次发版创建一个 SVN 标签（tag），这在未来的版本管理中很有帮助。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">svn</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> copy</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> ^/branches/prd</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> ^/tags/release-X.X.X</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -m</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">Tagging version X.X.X for release.</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span></span></code></pre></div><p>这个命令会将 <code>prd</code> 分支的当前状态复制到 <code>tags</code> 下，作为一个新版本发布的标记。</p><h2 id="分支管理" tabindex="-1">分支管理 <a class="header-anchor" href="#分支管理" aria-label="Permalink to &quot;分支管理&quot;">​</a></h2><p>在Subversion (SVN) 中，tags、trunk 和 branches 是三个常用的目录结构概念，它们用于组织和管理项目的不同版本、开发分支和稳定版本。</p><p>当然这种结构并不是必须的，是指约定俗成的最佳实践。</p><p>目录结构：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code" tabindex="0"><code><span class="line"><span>/project_root/</span></span>
<span class="line"><span>    /trunk/</span></span>
<span class="line"><span>    /branches/</span></span>
<span class="line"><span>    /tags/</span></span></code></pre></div><ol><li>Trunk（主干）</li></ol><p><code>trunk</code> 是项目的主开发线，也就是主干。通常，所有新的开发工作都会直接在 trunk 上进行。这包括新功能的开发、bug修复等。trunk 是项目的最新版本，通常处于不稳定状态，适合开发者使用。</p><ol start="2"><li>Branches（分支）</li></ol><p><code>branches</code> 目录通常包含项目的分支版本。分支通常用于开发新的功能、修复重大bug、或为特定版本进行定制。开发人员可以在分支上进行工作，而不影响 trunk 中的其他开发工作。</p><p>用途：</p><ul><li>功能分支：用于开发特定的新功能。</li><li>发布分支：用于准备发布的版本，并只允许进行bug修复和最后的调优。</li><li>维护分支：用于对已发布的版本进行维护，如修复bug和安全漏洞。</li></ul><ol start="3"><li>Tags（标签）</li></ol><p><code>tags</code> 目录通常用于保存项目在特定时间点的快照，这个快照是项目的某个版本的只读副本。通常用于标记一个项目的发布版本或里程碑版本。tags 中的内容应该是不可变的，即一旦创建，代码不应再更改。</p><p>用途：</p><ul><li>版本快照：创建项目发布版本的快照，如 v1.0, v2.0 等。</li><li>里程碑：记录项目达到某个里程碑时的代码状态。</li><li>优势：通过 tags，团队可以随时访问或回滚到历史上的某个稳定版本。</li></ul><p>日常开发项目目录：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code" tabindex="0"><code><span class="line"><span>/project_root/</span></span>
<span class="line"><span>    /trunk/                 # 主开发线</span></span>
<span class="line"><span>    /branches/</span></span>
<span class="line"><span>        /testing/           # 线上测试代码</span></span>
<span class="line"><span>        /production/        # 生产代码</span></span>
<span class="line"><span>    /tags/</span></span>
<span class="line"><span>        /v1.0.0/            # 生产版本的标签（快照）</span></span></code></pre></div><p>这里推荐一个mac上的svn工具:<a href="https://www.smartsvn.com/" target="_blank" rel="noreferrer">SmartSvn</a> 图形化命令界面。可以简化流程。 以及code diff工具：Kaleidoscope。集成了git,svn等主流版本管理工具</p>`,52),p=[t];function l(d,o,h,r,c,k){return a(),e("div",null,p)}const b=s(n,[["render",l]]);export{v as __pageData,b as default};
